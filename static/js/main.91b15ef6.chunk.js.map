{"version":3,"sources":["Game.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["theme","getTheme","Game","props","arrayContainsOtherArray","bigArray","smallerArray","every","element","includes","handleStart","initialBoard","tiles","map","tile","row","col","value","setState","curState","gameStart","currentPlayer","player1","board","setTimeout","document","querySelectorAll","forEach","item","style","boxShadow","effects","elevation8","opacity","handleRadioChange","event","key","stateKey","target","name","handleTileClick","e","state","outcome","clickedRow","parseInt","getAttribute","clickedCol","newBoard","changeThisIndex","findIndex","newCurrentPlayer","checkOutcome","mode","handleComputerTurn","winner","computerValue","positionsOfCurrentPlayer","filter","position","some","winPosition","addColorToWinPostion","handleGoBack","options","randomIndex","Math","floor","random","length","handlePlayAgain","render","className","ChoiceGroup","label","selectedKey","modeOptions","disabled","onChange","avatarOptions","DefaultButton","text","onClick","Text","variant","index","data-row","data-col","join","FontIcon","iconName","i","j","push","iconProps","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.91b15ef6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  DefaultButton,\r\n  getTheme,\r\n  ChoiceGroup,\r\n  Text,\r\n  FontIcon,\r\n} from \"@fluentui/react\";\r\nimport \"./stylesheets/Game.css\";\r\nconst theme = getTheme();\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.tiles = [];\r\n    for (let i = 1; i <= 3; i++) {\r\n      for (let j = 1; j <= 3; j++) {\r\n        this.tiles.push([i, j]);\r\n      }\r\n    }\r\n    this.modeOptions = [\r\n      { key: \"A\", text: \"1 Player\", iconProps: { iconName: \"Robot\" } },\r\n      {\r\n        key: \"B\",\r\n        text: \"2 Players\",\r\n        iconProps: { iconName: \"ConnectContacts\" },\r\n      },\r\n    ];\r\n    this.avatarOptions = [\r\n      { key: \"X\", iconProps: { iconName: \"Cancel\" } },\r\n      { key: \"O\", iconProps: { iconName: \"CircleRing\" } },\r\n    ];\r\n    this.state = {\r\n      mode: \"B\",\r\n      player1: \"X\",\r\n      gameStart: false,\r\n      currentPlayer: \"\",\r\n      board: [],\r\n      outcome: \"\",\r\n      winPosition: [],\r\n      winner: \"\",\r\n    };\r\n  }\r\n  // to check if bigArray contains all elements of smallerArray.\r\n  arrayContainsOtherArray = (bigArray, smallerArray) => {\r\n    return smallerArray.every((element) => bigArray.includes(element));\r\n  };\r\n  handleStart = () => {\r\n    let initialBoard = this.tiles.map((tile) => {\r\n      return { row: tile[0], col: tile[1], value: -1 };\r\n    });\r\n    this.setState(\r\n      (curState) => {\r\n        return {\r\n          gameStart: true,\r\n          currentPlayer: curState.player1,\r\n          board: initialBoard,\r\n        };\r\n      },\r\n      () => {\r\n        setTimeout(() => {\r\n          document.querySelectorAll(\".Game-gridItem\").forEach((item) => {\r\n            item.style.boxShadow = theme.effects.elevation8;\r\n          });\r\n        }, 500);\r\n        setTimeout(() => {\r\n          document.querySelectorAll(\".Game-hideFirst\").forEach((item) => {\r\n            item.style.opacity = 100;\r\n          });\r\n        }, 1000);\r\n      }\r\n    );\r\n  };\r\n  handleRadioChange = (event, { key }) => {\r\n    let stateKey = event.target.name;\r\n    this.setState(() => {\r\n      return { [stateKey]: key };\r\n    });\r\n  };\r\n  handleTileClick = (e) => {\r\n    if (!this.state.outcome) {\r\n      const clickedRow = parseInt(e.target.getAttribute(\"data-row\"));\r\n      const clickedCol = parseInt(e.target.getAttribute(\"data-col\"));\r\n      const newBoard = [...this.state.board];\r\n      const changeThisIndex = this.state.board.findIndex(\r\n        (element) => element.row === clickedRow && element.col === clickedCol\r\n      );\r\n      // to disable clicking same tile twice.\r\n      if (newBoard[changeThisIndex].value === -1) {\r\n        newBoard[changeThisIndex].value = this.state.currentPlayer;\r\n        const newCurrentPlayer = this.state.currentPlayer === \"X\" ? \"O\" : \"X\";\r\n        const outcome = this.checkOutcome();\r\n        // neither tie nor win.\r\n        if (outcome === -1) {\r\n          // two player mode\r\n          if (this.state.mode === \"B\") {\r\n            this.setState(() => {\r\n              return { board: newBoard, currentPlayer: newCurrentPlayer };\r\n            });\r\n          }\r\n          // single player mode\r\n          else {\r\n            this.setState(\r\n              () => {\r\n                return { board: newBoard };\r\n              },\r\n              () => {\r\n                this.handleComputerTurn();\r\n              }\r\n            );\r\n          }\r\n        } else if (outcome === \"win\") {\r\n          this.setState((curState) => {\r\n            return {\r\n              board: newBoard,\r\n              outcome: \"win\",\r\n              winner: curState.currentPlayer,\r\n            };\r\n          });\r\n        } else if (outcome === \"tie\") {\r\n          this.setState(() => {\r\n            return { board: newBoard, outcome: \"tie\" };\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  checkOutcome = (computerValue) => {\r\n    let { board, currentPlayer } = this.state;\r\n    if (computerValue) {\r\n      currentPlayer = computerValue;\r\n    }\r\n    //static win positions :( to avoid complex logic.\r\n    const winPositions = [\r\n      [\"1-1\", \"1-2\", \"1-3\"],\r\n      [\"2-1\", \"2-2\", \"2-3\"],\r\n      [\"3-1\", \"3-2\", \"3-3\"],\r\n      [\"1-1\", \"2-1\", \"3-1\"],\r\n      [\"1-2\", \"2-2\", \"3-2\"],\r\n      [\"1-3\", \"2-3\", \"3-3\"],\r\n      [\"1-1\", \"2-2\", \"3-3\"],\r\n      [\"1-3\", \"2-2\", \"3-1\"],\r\n    ];\r\n    const objectPositionsOfCurrentPlayer = board.filter(\r\n      (element) => element.value === currentPlayer\r\n    );\r\n    const positionsOfCurrentPlayer = objectPositionsOfCurrentPlayer.map(\r\n      (position) => `${position.row}-${position.col}`\r\n    );\r\n    if (\r\n      winPositions.some((winPosition) => {\r\n        if (\r\n          this.arrayContainsOtherArray(positionsOfCurrentPlayer, winPosition)\r\n        ) {\r\n          this.addColorToWinPostion(winPosition);\r\n        }\r\n        return this.arrayContainsOtherArray(\r\n          positionsOfCurrentPlayer,\r\n          winPosition\r\n        );\r\n      })\r\n    ) {\r\n      return \"win\";\r\n    } else if (board.every((element) => element.value !== -1)) {\r\n      return \"tie\";\r\n    }\r\n\r\n    return -1;\r\n  };\r\n  handleGoBack = () => {\r\n    this.setState(() => {\r\n      return {\r\n        mode: \"B\",\r\n        player1: \"X\",\r\n        gameStart: false,\r\n        currentPlayer: \"\",\r\n        board: [],\r\n        outcome: \"\",\r\n        winPosition: [],\r\n        winner: \"\",\r\n      };\r\n    });\r\n  };\r\n  handleComputerTurn = () => {\r\n    const computerValue = this.state.player1 === \"X\" ? \"O\" : \"X\";\r\n    const options = this.state.board.filter((element) => element.value === -1);\r\n    const randomIndex = Math.floor(Math.random() * options.length);\r\n    const newBoard = [...this.state.board];\r\n    const changeThisIndex = newBoard.findIndex(\r\n      (element) =>\r\n        element.row === options[randomIndex].row &&\r\n        element.col === options[randomIndex].col\r\n    );\r\n    newBoard[changeThisIndex].value = computerValue;\r\n    // if computer wins.\r\n    this.setState(\r\n      () => {\r\n        return { board: newBoard };\r\n      },\r\n      () => {\r\n        let outcome = this.checkOutcome(computerValue);\r\n        if (outcome === \"win\") {\r\n          this.setState(() => {\r\n            return { outcome: \"win\", winner: \"Computer\" };\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  handlePlayAgain = () => {\r\n    this.setState(\r\n      (curState) => {\r\n        return {\r\n          mode: curState.mode,\r\n          player1: curState.player1,\r\n          currentPlayer: curState.player1,\r\n          outcome: \"\",\r\n          winPosition: [],\r\n          winner: \"\",\r\n        };\r\n      },\r\n      () => {\r\n        this.handleStart();\r\n      }\r\n    );\r\n  };\r\n  addColorToWinPostion = (winPosition) => {\r\n    this.setState(() => {\r\n      return {\r\n        winPosition,\r\n      };\r\n    });\r\n  };\r\n  render = () => {\r\n    return (\r\n      <div className=\"Game\">\r\n        {!this.state.gameStart && (\r\n          <div className=\"Game-one\">\r\n            <ChoiceGroup\r\n              label=\"Select Mode\"\r\n              selectedKey={this.state.mode}\r\n              options={this.modeOptions}\r\n              name=\"mode\"\r\n              disabled={this.state.gameStart}\r\n              onChange={this.handleRadioChange}\r\n            />\r\n            <ChoiceGroup\r\n              label=\"Start as...\"\r\n              selectedKey={this.state.player1}\r\n              options={this.avatarOptions}\r\n              name=\"player1\"\r\n              disabled={this.state.gameStart}\r\n              onChange={this.handleRadioChange}\r\n            />\r\n            <DefaultButton\r\n              text=\"Start\"\r\n              onClick={this.handleStart}\r\n              disabled={this.state.gameStart}\r\n            />\r\n          </div>\r\n        )}\r\n        {this.state.gameStart && (\r\n          <div className=\"Game-two\">\r\n            <Text variant=\"xLargePlus\" className=\"Game-hideFirst\">\r\n              {this.state.outcome === \"win\"\r\n                ? `${this.state.winner} Wins`\r\n                : this.state.outcome === \"tie\"\r\n                ? \"Tie\"\r\n                : `${this.state.currentPlayer} Turn`}\r\n            </Text>\r\n            <div className=\"Game-gridContainer\">\r\n              {this.tiles.map((tile, index) => {\r\n                return (\r\n                  <div\r\n                    key={tile.join(\"-\")}\r\n                    data-row={tile[0]}\r\n                    data-col={tile[1]}\r\n                    className={`Game-gridItem ${\r\n                      this.state.winPosition.includes(tile.join(\"-\")) && \"win\"\r\n                    }`}\r\n                    onClick={this.handleTileClick}\r\n                  >\r\n                    {this.state.board[index].value === \"X\" ? (\r\n                      <FontIcon\r\n                        iconName=\"Cancel\"\r\n                        data-row={tile[0]}\r\n                        data-col={tile[1]}\r\n                      />\r\n                    ) : this.state.board[index].value === \"O\" ? (\r\n                      <FontIcon\r\n                        iconName=\"CircleRing\"\r\n                        data-row={tile[0]}\r\n                        data-col={tile[1]}\r\n                      />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {this.state.outcome && (\r\n              <DefaultButton\r\n                text=\"Play Again?\"\r\n                onClick={this.handlePlayAgain}\r\n              />\r\n            )}\r\n            <DefaultButton\r\n              text=\"Go Back\"\r\n              onClick={this.handleGoBack}\r\n              className=\"Game-hideFirst\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\nimport Game from \"./Game\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { initializeIcons } from \"@uifabric/icons\";\n\ninitializeIcons();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}